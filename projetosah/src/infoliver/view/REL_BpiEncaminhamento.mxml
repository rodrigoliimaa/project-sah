<mx:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:leonelcasado="http://www.leonelcasado.com.br/mxml"
		  xmlns:componentes="infoliver.view.componentes.*"
		  title="MAPA DE ENCAMINHAMENTO BPI/APAC PARA AUTORIZAÇÃO" width="100%" height="100%" verticalAlign="top"
		  paddingTop="3" paddingBottom="3" paddingLeft="3" paddingRight="3" creationComplete="init()">
	<fx:Script>
		<![CDATA[
			import infoliver.model.ModelLocator;
			import infoliver.model.entity.Fornecedor;
			import infoliver.model.entity.Movimentacao;
			import infoliver.model.entity.Programa;
			import infoliver.model.events.FornecedorEvent;
			import infoliver.model.events.MovimentacaoEvent;
			import infoliver.model.vo.PaginacaoVO;
			import infoliver.util.RoleSistema;
			
			import leonelcasado.componentes.Alerta;
			import leonelcasado.componentes.CustomViewHelper;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.resources.ResourceManager;
			import mx.utils.StringUtil;
			
			public const APAC_BPI_DATAGRID_INDEX:int = 1;
			
			public const APAC:String = "APAC";
			public const BPI:String = "BPI";
			public const NUMERO_NOTA:String = "NÚMERO DA NOTA";
			public const LISTA_TIPO_PESQUISA_AUDITIVO:Array = [
				APAC, NUMERO_NOTA
			];
			public const LISTA_TIPO_PESQUISA_ORTESE_PROTESE:Array = [
				BPI, NUMERO_NOTA
			];
			
			public const TODAS_SITUACOES:String = "TODAS";
			public const SITUACAO_ENTRADA:String = "ENTRADA";
			public const SITUACAO_ENCAMINHADO:String = "ENCAMINHADO";
			public const SITUACAO_ENTREGUE:String = "ENTREGUE";
			public const LISTA_SITUACOES_AUDITIVO:Array = [
				TODAS_SITUACOES, SITUACAO_ENTRADA, SITUACAO_ENTREGUE
			];
			public const LISTA_SITUACOES_ORTESE_PROTESE:Array = [
				TODAS_SITUACOES, SITUACAO_ENTRADA, SITUACAO_ENCAMINHADO, SITUACAO_ENTREGUE
			];
			public const LISTA_PROGRAMA:Array = ['ÓRTESE/PRÓTESE','AUDITIVO'];
			private var movimentacoes:ArrayCollection;
			private var sequencialForncedor : int;
			private var appModel:ModelLocator = ModelLocator.getInstance();
			private var dataInicio:String = (new Date().month +1 ) +"/" + (new Date().date +"/" + new Date().fullYear); 
			private var dataFinal:String=  (new Date().month +1 ) +	"/" + (new Date().date +"/" + new Date().fullYear); 
			public function criarColunas():void{
				
				dtg.addColunaTexto("APAC/BPI","apacBpi", null,null, 60);
				dtg.addColunaTexto("NOTA","numeroNota", null,null, 60);				
				dtg.addColunaTexto("PACIENTE","paciente.nome", null,null, 200);
				dtg.addColunaTexto("MÉDICO","medico.nome", null,null, 175);				
				dtg.addColunaTexto("FORNECEDOR","fornecedor.nomeFantasia", null,null, 30);
			}
			
			public function hasListagem():Boolean{
				return (movimentacoes != null && movimentacoes.length > 0);
			}
			
			private function init():void{
				criarColunas();
				validarPermissoesDaTela();
				listarFornecedores();
			}
			
			public function limparListagem():void{
				movimentacoes = new ArrayCollection();
				dtg.dtgCustom.dataProvider = movimentacoes;
			}
			public function listarFornecedores():void{
				
				new FornecedorEvent(FornecedorEvent.LISTAR_FORNECEDORES,this).dispatch();				
				
			}
			
			
			
			public function result(data:Object,event:Event):void{
				if (event.type == MovimentacaoEvent.LISTA_PAGINADO_COM_DATA_AUTORIZACAO) {
					movimentacoes = data.result.entidade;
					
					dtg.inicializarTotalizadores();
					dtg.setDataGridPaginado(data.result.totalRegistros,movimentacoes);
				}else if
					(event.type == FornecedorEvent.LISTAR_FORNECEDORES){
				}
			}
			
			private function validarPermissoesDaTela():void{
				if(appModel.isPermissaoValida(RoleSistema.ROLE_ALTERAR_MOVIMENTACAO)) {
					dtg.includeInLayoutBtnAlterarRegistro=false;
					dtg.doubleClickEnabled = true;
				} else {
					dtg.includeInLayoutBtnAlterarRegistro=false;
					dtg.doubleClickEnabled = false;
				}
				
				if(appModel.isPermissaoValida(RoleSistema.ROLE_EXCLUIR_MOVIMENTACAO)) {
					dtg.includeInLayoutBtnExcluirRegistro=false;
				} else {
					dtg.includeInLayoutBtnExcluirRegistro=false;
				}
				
				if(appModel.isPermissaoValida(RoleSistema.ROLE_INSERIR_MOVIMENTACAO)) {
					controles.includeInLayoutBtnNovo=false;
				} else {
					controles.includeInLayoutBtnNovo=false;
				}
			}
			
			private function fechar():void{
				FlexGlobals.topLevelApplication.fecharTela();
			}
			
			private function inicio_Click():void{
				dtg.inicio();
				listarPaginado();
			}
			
			private function retroceder_Click():void{
				dtg.retroceder();
				listarPaginado();
			}
			
			private function avancar_Click():void{
				dtg.avancar();
				listarPaginado();
			}
			
			private function fim_Click():void{
				dtg.fim();
				listarPaginado();
			}
			
			public function onCmbTipoPesquisaChange():void{
				var tipoPesquisa:String = cmbTipoPesquisa.selectedItem.toString();
				if(tipoPesquisa == "") {
					txtValorBusca.restrict = "A-Z/a-z/ /";
				} else {
					txtValorBusca.restrict = "0-9";
				}
			}
			public function onCmbProgramaChange():void{
				if(cmbPrograma.selectedIndex==1){					
					cmbTipoPesquisa.dataProvider = LISTA_TIPO_PESQUISA_AUDITIVO;
				}else if(cmbPrograma.selectedIndex==0){
					cmbTipoPesquisa.dataProvider = LISTA_TIPO_PESQUISA_ORTESE_PROTESE;
				}
			}
			public function onCmbTipoPesquisaChange2():void{
				var tipoPesquisa:String = cmbTipoPesquisa.selectedItem.toString();
				if(tipoPesquisa == "") {
					txtValorBusca.restrict = "A-Z/a-z/ /";
				} else {
					txtValorBusca.restrict = "0-9";
				}
			}
			
			public function onCheckBoxDataSolicitacaoChange():void{		
				
			}
			
			public function onCmbSituacoesChange():void{
				if (cmbSituacoes.selectedLabel == TODAS_SITUACOES) {
					checkBoxDataSituacao.selected = false;
					checkBoxDataSituacao.enabled = false;
					dthInicioSituacao.enabled = false;
					dthFimSituacao.enabled = false;
				} else {
					checkBoxDataSituacao.enabled = true;
				}
			}
			
			
			public function listarPaginado():void{
				var movimentacao:Movimentacao = new Movimentacao();
				var fornecedor :Fornecedor = new Fornecedor();
				var programa:Programa = new Programa();
				var numeroNota:String = '';
				var apacBpi:String = '';
				programa.sequencial = 1;
				movimentacao.fornecedor = fornecedor;
				movimentacao.programa = programa;
				//	FlexGlobals.topLevelApplication.principal.movimentacao.getPrograma();
				
				
				
				if ( StringUtil.trim(txtValorBusca.text) != "") {
					var tipoPesquisa:String = cmbTipoPesquisa.selectedItem.toString();
					if (tipoPesquisa == BPI || tipoPesquisa == APAC) {
						movimentacao.apacBpi = StringUtil.trim(txtValorBusca.text);
						apacBpi = StringUtil.trim(txtValorBusca.text);
					
					} else if (tipoPesquisa == NUMERO_NOTA) {
						movimentacao.numeroNota = StringUtil.trim(txtValorBusca.text);
						numeroNota = StringUtil.trim(txtValorBusca.text);
					}
				}
				
				
					movimentacao.dataInicioSolicitacao = dthInicioSolicitacao.selectedDate;
					if (dthFimSolicitacao.selectedDate != null) {
						movimentacao.dataFimSolicitacao = dthFimSolicitacao.selectedDate;
					}
				
				movimentacao.situacao = cmbSituacoes.selectedLabel;
				
				if (checkBoxDataSituacao.selected == true) {
					movimentacao.dataInicioSituacao = dthInicioSituacao.selectedDate;
					movimentacao.dataFimSituacao = dthFimSituacao.selectedDate;
				}
				
				if (checkBoxAutorizado.selected) {
					movimentacao.dataAutorizacao = new Date();
				}
				
				var paginacaoVO:PaginacaoVO = new PaginacaoVO();
				paginacaoVO.entidade = movimentacao;
				paginacaoVO.quantidadePaginacao = dtg.maximo;
				paginacaoVO.inicioPaginacao = dtg.indice;
				
				new MovimentacaoEvent(MovimentacaoEvent.LISTA_PAGINADO_COM_DATA_AUTORIZACAO, this, paginacaoVO).dispatch();
				
				txtValorBusca.setFocus();
				var url:String=ResourceManager.getInstance().getString('strings','url')+"previewRelatorioMapaBpi";				
				var request:URLRequest = new URLRequest(url);					
				preview.initStateProgress();				
				//--------------------------------------------------------------------------
				
				url=url+"?seqPrograma="+ programa.sequencial +"&apacBpi="+apacBpi+"&numeroNota="
					+numeroNota+"&dataInicio="+dataInicio+"&dataFim="+dataFinal+"&competencia="+txtComp.text;
			
				preview.html.location=url;	
			}
			
			
			private function useDate(eventObj:CalendarLayoutChangeEvent):void {
				// Make sure selectedDate is not null.
				if (eventObj.currentTarget.selectedDate == null) {
					return;
				}
				
				if(eventObj.currentTarget.selectedDate.getMonth()<=8){
					var mes:String = eventObj.currentTarget.selectedDate.getMonth() +1+"/";
					var ano:String =  eventObj.currentTarget.selectedDate.getFullYear();
					var data:String = "0"+mes +ano;					
					txtComp.text = data;
				}else{
					txtComp.text = eventObj.currentTarget.selectedDate.getMonth() +1+"/" + eventObj.currentTarget.selectedDate.getFullYear() ;
				}
			
					
				dataInicio= (eventObj.currentTarget.selectedDate.getMonth() +1 ) +
					"/" + (eventObj.currentTarget.selectedDate.getDate() +            
						"/" + eventObj.currentTarget.selectedDate.getFullYear());
			}
			private function useDateFim(eventObj:CalendarLayoutChangeEvent):void {
				// Make sure selectedDate is not null.
				if (eventObj.currentTarget.selectedDate == null) {
					return;
				}			
				
				dataFinal= (eventObj.currentTarget.selectedDate.getMonth() +1) +
					"/" + (eventObj.currentTarget.selectedDate.getDate() +            
						"/" + eventObj.currentTarget.selectedDate.getFullYear());
			}
		]]>
	</fx:Script>
	
	<mx:HDividedBox  width="100%" height="100%" paddingBottom="3" paddingLeft="3">
		<leonelcasado:CustomFieldSet title="Dados de Pesquisa" width="100%" height="100%">
			<mx:Form width="100%">
				
				<mx:FormItem label="Tipo:" width="100%" direction="horizontal">
					<leonelcasado:CustomComboBox id="cmbTipoPesquisa" change="onCmbTipoPesquisaChange()" restrict="0-9">
						<s:ArrayList source="{LISTA_TIPO_PESQUISA_ORTESE_PROTESE}" />
					</leonelcasado:CustomComboBox>
					<leonelcasado:CustomTextInput id="txtValorBusca" width="100%" />
				</mx:FormItem>
				<leonelcasado:CustomFieldSet title="Período da Competência" height="5%" width="100%" paddingBottom="5" paddingLeft="20"
											 paddingRight="20" paddingTop="20">
					<mx:FormItem label="Expecificar datas:" width="100%" direction="horizontal">						
						<leonelcasado:CustomLabel text="Início:" />
						<leonelcasado:CustomDateField id="dthInicioSolicitacao" change="useDate(event)" enabled="true" selectedDate="{new Date()}" showToday="false" formatString="DD/MM/YYYY"/>
						<leonelcasado:CustomLabel text="Fim:" />
						<leonelcasado:CustomDateField id="dthFimSolicitacao" enabled="true" change="useDateFim(event)" selectedDate="{new Date()}"/>
					</mx:FormItem>	
				</leonelcasado:CustomFieldSet>	
				<leonelcasado:CustomFieldSet title="Competência" height="5%" paddingBottom="5" paddingLeft="20"
											 paddingRight="20" paddingTop="20" width="100%">
					<mx:FormItem label="Especificar Competência:" direction="horizontal">
						<s:TextInput id="txtComp" width="50%" text="{new Date().monthUTC+1 +'/'+new Date().fullYear}"/>						
						<leonelcasado:CustomLabel text="Programa:"/>				
						<leonelcasado:CustomComboBox id="cmbPrograma" change="onCmbProgramaChange()">
							<s:ArrayList source="{LISTA_PROGRAMA}"/>
						</leonelcasado:CustomComboBox> 		
						
					</mx:FormItem>
				</leonelcasado:CustomFieldSet>				
				<mx:FormItem direction="horizontal">
					<componentes:BarraControles id="controles" styleButtons="menuButton"
												includeInLayoutBtnNovo="false" includeInLayoutBtnConsultar="true"
												includeInLayoutBtnFechar="true" 
												consultar="listarPaginado()"
												fechar="fechar()"/>
					<leonelcasado:CustomButton label="Gerar Relatório" visible="false"/>
				</mx:FormItem>
				<leonelcasado:CustomFieldSet title="Situação" height="5%" paddingBottom="5" paddingLeft="20"
											 paddingRight="20" paddingTop="20" visible="false">
					<mx:HBox>
						<leonelcasado:CustomComboBox id="cmbSituacoes" change="onCmbSituacoesChange()">
						<s:ArrayList source="{LISTA_SITUACOES_ORTESE_PROTESE}"/>
							</leonelcasado:CustomComboBox>
						<leonelcasado:CustomLabel text="Especificar datas:" />
						<leonelcasado:CustomCheckBox id="checkBoxDataSituacao" enabled="false" />
						<leonelcasado:CustomLabel text="Início:" /> 
						<leonelcasado:CustomDateField id="dthInicioSituacao" enabled="false" selectedDate="{new Date()}" showToday="true"/>
						<leonelcasado:CustomLabel text="Fim:" />
						<leonelcasado:CustomDateField id="dthFimSituacao" enabled="false" />
						<leonelcasado:CustomLabel text="Autorizado"  visible="false"/>
						<leonelcasado:CustomCheckBox id="checkBoxAutorizado"  visible="false"/>
					</mx:HBox>
				</leonelcasado:CustomFieldSet>
				
			</mx:Form>
			<leonelcasado:CustomDataGrid id="dtg" width="100%" height="100%"
										 horizontalScrollCustomDataGrid="on"
										 primeiroRegistro="inicio_Click()" registroAlterior="retroceder_Click()" 
										 proximoRegistro="avancar_Click()" ultimoRegistro="fim_Click()"
										 includeInLayoutBtnAlterarRegistro="false"										
										 includeInLayoutBtnExcluirRegistro="false"
										 />
		</leonelcasado:CustomFieldSet>		
		<componentes:Preview id="preview" width="70%" height="100%"/>
	</mx:HDividedBox>
</mx:Panel>